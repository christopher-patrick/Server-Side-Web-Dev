name: 'Snyk SBOM Wrapper'
description: 'A wrapper for Snyk to simplify SBOM generation'
inputs:
  scan_directory:
    description: 'Directory to scan project files in (default to all projects if not specified)'
    type: string
    default: '--all-projects'
  exclude:
    description: 'directory and/or file name(s) to exclude from the scan, must comma-separated if multiple files/directories are provided. Only works with SCA scan type'
    type: string
    default: ''
  sbom_name:
    description: 'Name you want the sbom to have, no need for a file extension. Please include version name of the component. Example: snyk_sbom_v0.0.1'
    required: true
    type: string
    default: 'snyk_sbom'
  org:
    description: 'Snyk org'
    required: true
    type: string
  snyk_token:
    description: 'Snyk auth token'
    required: true
    type: string
    secret: true
  artifactory_username:
    description: 'artifactory username'
    required: true
    type: string
    secret: true
  artifactory_token:
    description: 'artifactory auth token'
    required: true
    type: string
    secret: true
  artifactory_destination:
    description: 'artifactory destination path. Make sure the path starts with /generic-unsigned-sbom-storage. Example: generic-unsigned-sbom-storage/software_name/release_name/v_0.0.1'
    required: true
    type: string
runs:
  using: 'composite'
  steps:
    - name: Set global vars
      id: vars
      shell: bash
      run: |
        # Extract base filename without extension if present
        FILENAME="${{ inputs.sbom_name }}"
        if [[ "$FILENAME" != *.json ]]; then
          FILENAME="${FILENAME}.json"
        fi
        echo "snyk_output_sbom=$FILENAME" >> "${GITHUB_OUTPUT}"
    - name: Setup Snyk
      uses: snyk/actions/setup@v2
    - name: setup node
      uses: actions/setup-node@v3.8.1
      with:
        node-version: latest

    - name: Run Snyk SBOM generation
      id: scan
      shell: bash
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ inputs.snyk_token }}
      run: |
        : # do not exit on error
        set +e
        
        : # validate scan_directory variable
        if [ "${{ inputs.scan_directory }}" == "" ]; then
          DIRS_TO_SCAN='--all-projects'
          echo "dirs_to_scan=--all-projects" >> "${GITHUB_OUTPUT}"
        elif [ "${{ inputs.scan_directory }}" == " " ]; then
          DIRS_TO_SCAN='--all-projects'
        else
          DIRS_TO_SCAN="${{ inputs.scan_directory }}"
        fi

        : # assign/validate snyk cli command based on scan_type provided
        if [ "${{ inputs.exclude }}" != "" ]; then
          EXCLUSION="--exclude=${{ inputs.exclude }}"
        else
          EXCLUSION="${{ inputs.exclude }}"
        fi 
        echo "scan_dirs=$DIRS_TO_SCAN" >> "${GITHUB_OUTPUT}"
        
        start_time=$(date +%s)
        
        : # run snyk scan
        snyk sbom "$DIRS_TO_SCAN" "$EXCLUSION" --format=cyclonedx1.5+json --json-file-output="${{ steps.vars.outputs.snyk_output_sbom }}"
        
        end_time=$(date +%s)
        runtime=$((end_time - start_time))ยง
        runtime_minutes=$((runtime / 60))

    # Run a check to ensure the SBOM file was generated successfully
    - name: Check SBOM Generation Status
      shell: bash
      run: |
        if [ ! -f "${{ steps.vars.outputs.snyk_output_sbom }}" ]; then
          echo "::error::SBOM file was not generated successfully"
          exit 1
        fi

    - name: Upload code analysis content
      if: always()
      uses: actions/upload-artifact@v3.1.3
      with:
        path: |
          ${{ steps.vars.outputs.snyk_output_sbom }}

    - name: Upload to Artifactory
      shell: bash
      run: |
        # Install JFrog CLI
        curl -fL https://install-cli.jfrog.io | sh
        export PATH=$PATH:$HOME/.jfrog/bin
        
        # Configure JFrog CLI
        jf config add --url https://ussd.artifactory.illumina.com --user ${{ inputs.artifactory_username }} --password ${{ inputs.artifactory_token }}
        
        # Ensure destination path has trailing slash if not already present
        DEST_PATH="${{ inputs.artifactory_destination }}"
        [[ "${DEST_PATH}" != */ ]] && DEST_PATH="${DEST_PATH}/"
        
        # Create full destination path by combining destination path with filename
        FULL_DEST_PATH="${DEST_PATH}${{ steps.vars.outputs.snyk_output_sbom }}"
        
        # Upload SBOM file to Artifactory
        jf rt upload "${{ steps.vars.outputs.snyk_output_sbom }}" "${FULL_DEST_PATH}" --recursive=false
        
        echo "Successfully uploaded SBOM to ${FULL_DEST_PATH}"
